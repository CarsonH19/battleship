{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://repository-template/webpack/bootstrap","webpack://repository-template/webpack/runtime/define property getters","webpack://repository-template/webpack/runtime/hasOwnProperty shorthand","webpack://repository-template/./src/text.js","webpack://repository-template/./src/ship.js","webpack://repository-template/./src/isValid.js","webpack://repository-template/./src/gameBoard.js","webpack://repository-template/./src/computer.js","webpack://repository-template/./src/player.js","webpack://repository-template/./src/dom.js","webpack://repository-template/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","\nexport function displayText(str) {\n  const textBox = document.querySelector('.text-box');\n  textBox.innerText = str;\n}","import { displayText } from \"./text\";\nimport { turn } from \"./index\";\n\n\nexport class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.hits = 0;\n    this.sunk = false;\n  }\n\n  hit() {\n    this.hits++;\n    if (this.hits === this.length) {\n      displayText(`${turn} ${this.name} has sunk!`);\n      this.sunk = true;\n    }\n  }\n\n  isSunk() {\n    return this.sunk;\n  }\n}","import { playerGameBoard } from \"./index\";\n\n// Check if ship fits on board and does not overlap\nexport function isValid(ship, x, y, isHorizontal, board = playerGameBoard) {\n  // Check if ship goes out of the board's grid\n  if (isHorizontal) {\n    if (y + ship.length - 1 >= 10 || x >= 10) {\n      return false;\n    }\n    for (let i = y; i < y + ship.length - 1; i++) {\n      if (board.grid[x][i] !== null) {\n        return false;\n      }\n    }\n  } else {\n    if (x + ship.length - 1 >= 10 || y >= 10) {\n      return false;\n    }\n    for (let i = x; i < x + ship.length - 1; i++) {\n      if (board.grid[i][y] !== null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","import { Ship } from \"./ship\";\nimport { isValid } from \"./isValid\";\nimport { displayText } from \"./text\";\n\nexport class GameBoard {\n  constructor(gridSize = 10) {\n    this.gridSize = gridSize;\n    this.grid = this.createGrid();\n    this.ships = [];\n    this.missedAttacks = [];\n  }\n\n  createGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null)\n    );\n  }\n\n  renderGameBoard(containerId) {\n    const container = document.getElementById(containerId);\n    container.innerHTML = \"\";\n\n    const table = document.createElement(\"table\");\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = document.createElement(\"tr\");\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n\n        // Set id attribute with x, y coordinates\n        cell.id = `${i}-${j}`;\n\n        if (containerId === \"player-gameboard\") {\n          cell.classList.add(\"player-cell\");\n          for (const shipObj of this.ships) {\n            // Check if the ship occupies the specified grid location (i, j)\n            if (\n              shipObj.horizontal && // Ship is placed horizontally\n              i === shipObj.x && // Row matches ship's starting row\n              j >= shipObj.y && // Column is within the range of the ship's length\n              j < shipObj.y + shipObj.ship.length // Column is within the range of the ship's length\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            } else if (\n              !shipObj.horizontal && // Ship is placed vertically\n              i >= shipObj.x && // Row is within the range of the ship's length\n              i < shipObj.x + shipObj.ship.length && // Row is within the range of the ship's length\n              j === shipObj.y // Column matches ship's starting column\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            }\n          }\n\n          // Event Listeners to place ships\n          // cell.addEventListener(\"click\", () => {\n          //   this.placeShip(i, j);\n          // });\n        } else {\n          cell.classList.add(\"computer-cell\");\n          cell.classList.add(\"blank\"); // white smoke color\n        }\n\n        // add cell classes for hit & missed\n        if (this.grid[i][j] === null) {\n          cell.classList.add(\"blank\"); // white smoke color\n        } else if (this.grid[i][j] === \"HIT\") {\n          cell.classList.add(\"hit\"); // red color\n        } else if (this.grid[i][j] === \"MISS\") {\n          cell.classList.add(\"miss\"); // dark gray color\n          // turn off cursor/don't allow click\n        }\n\n        row.appendChild(cell);\n      }\n      table.appendChild(row);\n    }\n    container.appendChild(table);\n  }\n\n  placeShip(ship, x, y, horizontal) {\n    if (isValid(ship, x, y, horizontal)) {\n      if (horizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Vertical: ${x}, ${y + i}`);\n          this.grid[x][y + i] = ship;\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Horizontal: ${x + i}, ${y}`);\n          this.grid[x + i][y] = ship;\n        }\n      }\n      this.ships.unshift({ ship, x, y, horizontal });\n      displayText(`${ship.name} placed!`);\n\n    } else {\n      alert(\"Please choose a valid location!\");\n    }\n  }\n\n  receiveAttack(x, y) {\n    const target = this.grid[x][y];\n    if (target instanceof Ship) {\n      displayText(`Hit!`);\n      target.hit();\n      this.grid[x][y] = \"HIT\";\n      \n    } else {\n      this.missedAttacks.push({ x, y });\n      displayText(`Miss!`);\n      this.grid[x][y] = \"MISS\";\n    }\n\n    console.log(this.grid[x][y]);\n  }\n\n  allShipsSunk() {\n    return this.ships.every((shipObj) => shipObj.ship.isSunk());\n  }\n}\n","import { computerGameBoard } from \"./index\";\nimport { isValid } from \"./isValid\"; \n\n// Handle Computer's Turn\nexport function computerTurn(board) {\n  // Implement computer logic for a random move\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  board.receiveAttack(x, y);\n}\n\n// Randomly places computer ships\nexport function placeComputerShips(ship) {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  const randomBoolean = Math.random() < 0.5;\n  let isHorizontal = randomBoolean;\n\n  if (isValid(ship, x, y, isHorizontal, computerGameBoard)) {\n    computerGameBoard.placeShip(ship, x, y, isHorizontal);\n  } else {\n    placeComputerShips(ship);\n  }\n}","import { computerGameBoard, playerGameBoard } from \"./index\";\n// import { isValid } from \"./isValid\"; \n\n\nexport function playerTurn(board) {\n  return new Promise((resolve) => {\n    // Add event listener to handle player's click on computer's cells\n    const computerCells = document.querySelectorAll(\".computer-cell.blank\");\n\n    function clickHandler() {\n      // Extract coordinates from cell id or data attribute\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      // Call the function to attack the computer's cell\n      board.receiveAttack(x, y);\n\n      // Remove event listener after the player's turn\n      computerCells.forEach((cell) => {\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      // Resolve the promise to indicate the end of the player's turn\n      resolve();\n    }\n\n    computerCells.forEach((cell) => {\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n\nexport function placePlayerShips(ship) {\n  return new Promise((resolve) => {\n    const playerCells = document.querySelectorAll(\".player-cell.blank\");\n\n    function mouseoverHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      // Highlight cells based on ship's length and orientation\n      if (isHorizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x}-${y + i}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x + i}-${y}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      }\n    }\n\n    function mouseoutHandler() {\n      document.querySelectorAll(\".highlight\").forEach((cell) => {\n        cell.classList.remove(\"highlight\");\n      });\n    }\n\n    function clickHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      playerGameBoard.placeShip(ship, x, y, isHorizontal);\n\n      // Remove event listeners after placing ship\n      playerCells.forEach((cell) => {\n        cell.removeEventListener(\"mouseover\", mouseoverHandler);\n        cell.removeEventListener(\"mouseout\", mouseoutHandler);\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      resolve();\n    }\n\n    playerCells.forEach((cell) => {\n      cell.addEventListener(\"mouseover\", mouseoverHandler);\n      cell.addEventListener(\"mouseout\", mouseoutHandler);\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n","import { gameLoop } from \"./index\";\n\nexport function startGame() {\n  const startBtn = document.getElementById(\"start-btn\");\n\n  startBtn.addEventListener(\"click\", () => {\n    const content = document.querySelector(\".content\");\n    const gameWindow = document.querySelector(\".game-window\");\n    gameWindow.style.display = \"flex\";\n    content.style.display = \"none\";\n    gameLoop();\n  });\n}\n\nexport function toggleOrientation() {\n  const orientationButton = document.querySelector(\".orientation-btn\");\n\n  orientationButton.addEventListener(\"click\", () => {\n    if (orientationButton.textContent === \"Horizontal\") {\n      orientationButton.textContent = \"Vertical\";\n    } else {\n      orientationButton.textContent = \"Horizontal\";\n    }\n  });\n}\n","import { GameBoard } from \"./gameBoard\";\nimport { Ship } from \"./ship\";\nimport { startGame, toggleOrientation } from \"./dom\";\nimport { computerTurn, placeComputerShips } from \"./computer\";\nimport { playerTurn, placePlayerShips } from \"./player\";\nimport { displayText } from \"./text\";\n\n// Initialize event listeners\nstartGame();\ntoggleOrientation();\n\n// Initialize player board & ships\nexport const playerGameBoard = new GameBoard();\nconst playerCarrier = new Ship(\"Carrier\", 5);\nconst playerBattleship = new Ship(\"Battleship\", 4);\nconst playerCruiser = new Ship(\"Cruiser\", 3);\nconst playerSubmarine1 = new Ship(\"Submarine\", 3);\nconst playerSubmarine2 = new Ship(\"Submarine\", 3);\nconst playerDestroyer1 = new Ship(\"Destroyer\", 2);\nconst playerDestroyer2 = new Ship(\"Destroyer\", 2);\nlet playerShips = [\n  playerCarrier,\n  playerBattleship,\n  playerCruiser,\n  playerSubmarine1,\n  playerSubmarine2,\n  playerDestroyer1,\n  playerDestroyer2,\n];\n\n// Initialize computer board & ships\nexport const computerGameBoard = new GameBoard();\nconst computerCarrier = new Ship(\"Carrier\", 5);\nconst computerBattleship = new Ship(\"Battleship\", 4);\nconst computerCruiser = new Ship(\"Cruiser\", 3);\nconst computerSubmarine1 = new Ship(\"Submarine\", 3);\nconst computerSubmarine2 = new Ship(\"Submarine\", 3);\nconst computerDestroyer1 = new Ship(\"Destroyer\", 2);\nconst computerDestroyer2 = new Ship(\"Destroyer\", 2);\n\nexport let turn = 'Your'; // \"Your\" / \"The enemy\"\n\n// place computer ships\nplaceComputerShips(computerCarrier);\nplaceComputerShips(computerBattleship);\nplaceComputerShips(computerCruiser);\nplaceComputerShips(computerSubmarine1);\nplaceComputerShips(computerSubmarine2);\nplaceComputerShips(computerDestroyer1);\nplaceComputerShips(computerDestroyer2);\n\nexport async function gameLoop() {\n  let gameOver = false;\n  playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n  // player places ships\n  displayText(\"Admiral, ready your ships.\");\n\n  while (playerShips.length > 0) {\n    await placePlayerShips(playerShips[0]);\n    if (playerGameBoard.ships[0].ship === playerShips[0]) {\n      playerShips.shift();\n    }\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n  }\n\n  // hide orientation button after boats are placed\n  const orientationButton = document.querySelector(\".orientation-btn\");\n  orientationButton.style.display = \"none\";\n\n  // render computer's board after player places ships\n  computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n  // Start Game loop\n  while (!gameOver) {\n    // player's turn\n    turn = 'Your';\n    displayText(\"Admiral, where shall you strike?\");\n\n    await playerTurn(computerGameBoard);\n    computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n    await delay(1500);\n\n    // check if player wins\n    if (computerGameBoard.allShipsSunk()) {\n      displayText(\"All enemy ships have sunk! Mission accomplished!\");\n      gameOver = true;\n      alert(\"Player Wins!\");\n      break;\n    }\n\n    // delay before computer's turn\n    turn = 'The enemy';\n    displayText(\"Enemy attack incoming!\");\n    await delay(1500);\n\n    // computer's turn\n    computerTurn(playerGameBoard);\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n    await delay(1500);\n\n    // check if computer wins\n    if (playerGameBoard.allShipsSunk()) {\n      displayText(\"All your ships have sunk! Mission failed!\");\n      gameOver = true;\n      alert(\"Computer Wins!\");\n      break;\n    }\n  }\n\n  // function gameOver() {}\n\n  function delay(ms) {\n    // Function to introduce delay using Promise\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","displayText","str","document","querySelector","innerText","Ship","constructor","name","length","this","hits","sunk","hit","turn","isSunk","isValid","ship","x","y","isHorizontal","board","playerGameBoard","i","grid","GameBoard","gridSize","createGrid","ships","missedAttacks","Array","from","fill","renderGameBoard","containerId","container","getElementById","innerHTML","table","createElement","row","j","cell","classList","add","id","shipObj","horizontal","appendChild","placeShip","console","log","unshift","alert","receiveAttack","target","push","allShipsSunk","every","computerTurn","Math","floor","random","placeComputerShips","computerGameBoard","playerTurn","Promise","resolve","computerCells","querySelectorAll","clickHandler","coordinates","split","map","Number","forEach","removeEventListener","addEventListener","placePlayerShips","playerCells","mouseoverHandler","textContent","mouseoutHandler","remove","content","style","display","gameLoop","orientationButton","toggleOrientation","playerShips","computerCarrier","computerBattleship","computerCruiser","computerSubmarine1","computerSubmarine2","computerDestroyer1","computerDestroyer2","async","gameOver","shift","delay","ms","setTimeout"],"sourceRoot":""}