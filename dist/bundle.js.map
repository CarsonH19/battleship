{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://repository-template/./src/ship.js","webpack://repository-template/./src/gameBoard.js","webpack://repository-template/./src/index.js"],"sourcesContent":["export class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = 0;\n    this.sunk = false;\n  }\n\n  hit() {\n    this.hits++;\n    if (this.hits === this.length) {\n      this.sunk = true;\n    }\n  }\n\n  isSunk() {\n    return this.sunk;\n  }\n}","import { Ship } from \"./ship\";\n\nexport class GameBoard {\n  constructor(gridSize = 10) {\n    this.gridSize = gridSize;\n    this.grid = this.createGrid();\n    this.ships = [];\n    this.missedAttacks = [];\n  }\n\n  createGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null)\n    );\n  }\n\n  renderGameBoard(containerId) {\n    const container = document.getElementById(containerId);\n    container.innerHTML = \"\";\n\n    const table = document.createElement(\"table\");\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = document.createElement(\"tr\");\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n\n        // Set id attribute with x, y coordinates\n        cell.id = `${i}-${j}`;\n\n        if (containerId === \"player-gameboard\") {\n          cell.classList.add(\"player-cell\");\n          for (const shipObj of this.ships) {\n            // Check if the ship occupies the specified grid location (i, j)\n            if (\n              shipObj.horizontal && // Ship is placed horizontally\n              i === shipObj.x && // Row matches ship's starting row\n              j >= shipObj.y && // Column is within the range of the ship's length\n              j < shipObj.y + shipObj.ship.length // Column is within the range of the ship's length\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            } else if (\n              !shipObj.horizontal && // Ship is placed vertically\n              i >= shipObj.x && // Row is within the range of the ship's length\n              i < shipObj.x + shipObj.ship.length && // Row is within the range of the ship's length\n              j === shipObj.y // Column matches ship's starting column\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            }\n          }\n\n          // Event Listeners to place ships\n          // cell.addEventListener(\"click\", () => {\n          //   this.placeShip(i, j);\n          // });\n        } else {\n          cell.classList.add(\"computer-cell\");\n          cell.classList.add(\"blank\"); // white smoke color\n        }\n\n        // add cell classes for hit & missed\n        if (this.grid[i][j] === null) {\n          cell.classList.add(\"blank\"); // white smoke color\n        } else if (this.grid[i][j] === \"HIT\") {\n          cell.classList.add(\"hit\"); // red color\n        } else if (this.grid[i][j] === \"MISS\") {\n          cell.classList.add(\"miss\"); // dark gray color\n          // turn off cursor/don't allow click\n        }\n\n        row.appendChild(cell);\n      }\n      table.appendChild(row);\n    }\n    container.appendChild(table);\n  }\n\n  placeShip(ship, x, y, horizontal) {\n    if (horizontal) {\n      for (let i = 0; i < ship.length; i++) {\n        this.grid[x][y + i] = ship;\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.grid[x + i][y] = ship;\n      }\n    }\n    this.ships.push({ ship, x, y, horizontal });\n  }\n\n  receiveAttack(x, y) {\n    const target = this.grid[x][y];\n    if (target instanceof Ship) {\n      target.hit();\n      this.grid[x][y] = \"HIT\";\n    } else {\n      this.missedAttacks.push({ x, y });\n      this.grid[x][y] = \"MISS\";\n    }\n\n    console.log(this.grid[x][y]);\n  }\n\n  allShipsSunk() {\n    return this.ships.every((shipObj) => shipObj.ship.isSunk());\n  }\n}\n","import { GameBoard } from \"./gameBoard\";\nimport { Ship } from \"./ship\";\n\nconst startBtn = document.getElementById(\"start-btn\");\n\nstartBtn.addEventListener(\"click\", () => {\n  const content = document.querySelector(\".content\");\n  content.style.display = \"none\";\n  playerGameBoard.renderGameBoard(\"player-gameboard\");\n  computerGameBoard.renderGameBoard(\"computer-gameboard\");\n  gameLoop();\n\n  // add function to let player place boats\n  // add function to randomly place computer boats\n});\n\n// add readyBtn to begin the game after placing boats\n// readyBtn.addEventListener('click', () => {\n//   // render the board with boats placed.\n// });\n\nconst gameWindow = document.querySelector(\".game-window\");\ngameWindow.style.display = \"flex\";\n\nconst playerGameBoard = new GameBoard();\nconst playerCarrier = new Ship(5);\nconst playerBattleship = new Ship(4);\nconst playerCruiser = new Ship(3);\nconst playerSubmarine1 = new Ship(3);\nconst playerSubmarine2 = new Ship(3);\nconst playerDestroyer1 = new Ship(2);\nconst playerDestroyer2 = new Ship(2);\n// place player ships\nplayerGameBoard.placeShip(playerCarrier, 1, 5, true);\nconsole.log(playerGameBoard.grid);\nplayerGameBoard.placeShip(playerBattleship, 2, 5, true);\nplayerGameBoard.placeShip(playerCruiser, 3, 5, true);\nplayerGameBoard.placeShip(playerSubmarine1, 4, 5, true);\nplayerGameBoard.placeShip(playerSubmarine2, 5, 5, true);\nplayerGameBoard.placeShip(playerDestroyer1, 6, 5, true);\nplayerGameBoard.placeShip(playerDestroyer2, 7, 5, true);\n\nconst computerGameBoard = new GameBoard();\nconst computerCarrier = new Ship(5);\nconst computerBattleship = new Ship(4);\nconst computerCruiser = new Ship(3);\nconst computerSubmarine1 = new Ship(3);\nconst computerSubmarine2 = new Ship(3);\nconst computerDestroyer1 = new Ship(2);\nconst computerDestroyer2 = new Ship(2);\n// place computer ships\ncomputerGameBoard.placeShip(computerCarrier, 1, 5, true);\ncomputerGameBoard.placeShip(computerBattleship, 2, 5, true);\ncomputerGameBoard.placeShip(computerCruiser, 3, 5, true);\ncomputerGameBoard.placeShip(computerSubmarine1, 4, 5, true);\ncomputerGameBoard.placeShip(computerSubmarine2, 5, 5, true);\ncomputerGameBoard.placeShip(computerDestroyer1, 6, 5, true);\ncomputerGameBoard.placeShip(computerDestroyer2, 7, 5, true);\nconsole.log(computerGameBoard.grid);\n\n// Handle Player's Turn\nasync function playerTurn() {\n  return new Promise((resolve) => {\n    // Add event listener to handle player's click on computer's cells\n    const computerCells = document.querySelectorAll(\".computer-cell.blank\");\n\n    function clickHandler() {\n      // Extract coordinates from cell id or data attribute\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      // Call the function to attack the computer's cell\n      computerGameBoard.receiveAttack(x, y);\n\n      // Remove event listener after the player's turn\n      computerCells.forEach((cell) => {\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      // Resolve the promise to indicate the end of the player's turn\n      resolve();\n    }\n\n    computerCells.forEach((cell) => {\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n\n// Handle Computer's Turn\nasync function computerTurn(playerGameBoard) {\n  // Implement computer logic for a random move\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  playerGameBoard.receiveAttack(x, y);\n}\n\nfunction delay(ms) {\n  // Function to introduce delay using Promise\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nasync function gameLoop() {\n  // Initialize game state\n  let gameOver = false;\n\n  // Game loop\n  while (!gameOver) {\n    // Player's turn\n    console.log('Player, choose a cell');\n    await playerTurn(computerGameBoard);\n    computerGameBoard.renderGameBoard('computer-gameboard');\n\n    // Check if player's move resulted in game over\n    if (computerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Player Wins!\");\n      break;\n    }\n\n    // Delay before computer's turn\n    await delay(3000); // Adjust delay time as needed\n\n    // Computer's turn\n    computerTurn(playerGameBoard);\n    playerGameBoard.renderGameBoard('player-gameboard');\n    console.log('Computer attacks!');\n\n\n    // Check if computer's move resulted in game over\n    if (playerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Computer Wins!\");\n      break;\n    }\n\n    // Repeat the loop\n  }\n\n  // Game over, display result\n  // displayGameResult();\n}\n"],"names":["Ship","constructor","length","this","hits","sunk","hit","isSunk","GameBoard","gridSize","grid","createGrid","ships","missedAttacks","Array","from","fill","renderGameBoard","containerId","container","document","getElementById","innerHTML","table","createElement","i","row","j","cell","classList","add","id","shipObj","horizontal","x","y","ship","appendChild","placeShip","push","receiveAttack","target","console","log","allShipsSunk","every","addEventListener","querySelector","style","display","playerGameBoard","computerGameBoard","async","gameOver","playerTurn","alert","delay","computerTurn","gameLoop","playerCarrier","playerBattleship","playerCruiser","playerSubmarine1","playerSubmarine2","playerDestroyer1","playerDestroyer2","computerCarrier","computerBattleship","computerCruiser","computerSubmarine1","computerSubmarine2","computerDestroyer1","computerDestroyer2","Promise","resolve","computerCells","querySelectorAll","clickHandler","coordinates","split","map","Number","forEach","removeEventListener","Math","floor","random","ms","setTimeout"],"sourceRoot":""}