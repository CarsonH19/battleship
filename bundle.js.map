{"version":3,"file":"bundle.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,kBCA3E,MAAMI,EACX,WAAAC,CAAYC,GACVC,KAAKD,OAASA,EACdC,KAAKC,KAAO,EACZD,KAAKE,MAAO,CACd,CAEA,GAAAC,GACEH,KAAKC,OACDD,KAAKC,OAASD,KAAKD,SACrBC,KAAKE,MAAO,EAEhB,CAEA,MAAAE,GACE,OAAOJ,KAAKE,IACd,ECbK,MAAMG,EACX,WAAAP,CAAYQ,EAAW,IACrBN,KAAKM,SAAWA,EAChBN,KAAKO,KAAOP,KAAKQ,aACjBR,KAAKS,MAAQ,GACbT,KAAKU,cAAgB,EACvB,CAEA,UAAAF,GACE,OAAOG,MAAMC,KAAK,CAAEb,OAAQC,KAAKM,WAAY,IAC3CK,MAAMX,KAAKM,UAAUO,KAAK,OAE9B,CAEA,eAAAC,CAAgBC,GACd,MAAMC,EAAYC,SAASC,eAAeH,GAC1CC,EAAUG,UAAY,GAEtB,MAAMC,EAAQH,SAASI,cAAc,SACrC,IAAK,IAAIC,EAAI,EAAGA,EAAItB,KAAKM,SAAUgB,IAAK,CACtC,MAAMC,EAAMN,SAASI,cAAc,MACnC,IAAK,IAAIG,EAAI,EAAGA,EAAIxB,KAAKM,SAAUkB,IAAK,CACtC,MAAMC,EAAOR,SAASI,cAAc,MAMpC,GALAI,EAAKC,UAAUC,IAAI,QAGnBF,EAAKG,GAAK,GAAGN,KAAKE,IAEE,qBAAhBT,EAAoC,CACtCU,EAAKC,UAAUC,IAAI,eACnB,IAAK,MAAME,KAAW7B,KAAKS,OAGvBoB,EAAQC,YACRR,IAAMO,EAAQE,GACdP,GAAKK,EAAQG,GACbR,EAAIK,EAAQG,EAAIH,EAAQI,KAAKlC,SAK5B8B,EAAQC,YACTR,GAAKO,EAAQE,GACbT,EAAIO,EAAQE,EAAIF,EAAQI,KAAKlC,QAC7ByB,IAAMK,EAAQG,IALdP,EAAKC,UAAUC,IAAI,OAgBzB,MACEF,EAAKC,UAAUC,IAAI,iBACnBF,EAAKC,UAAUC,IAAI,SAIG,OAApB3B,KAAKO,KAAKe,GAAGE,GACfC,EAAKC,UAAUC,IAAI,SACU,QAApB3B,KAAKO,KAAKe,GAAGE,GACtBC,EAAKC,UAAUC,IAAI,OACU,SAApB3B,KAAKO,KAAKe,GAAGE,IACtBC,EAAKC,UAAUC,IAAI,QAIrBJ,EAAIW,YAAYT,EAClB,CACAL,EAAMc,YAAYX,EACpB,CACAP,EAAUkB,YAAYd,EACxB,CAEA,SAAAe,CAAUF,EAAMF,EAAGC,EAAGF,GACpB,GAAIM,EAAQH,EAAMF,EAAGC,EAAGF,GAAa,CACnC,GAAIA,EACF,IAAK,IAAIR,EAAI,EAAGA,EAAIW,EAAKlC,OAAQuB,IAC/Be,QAAQC,IAAI,aAAaP,MAAMC,EAAIV,KACnCtB,KAAKO,KAAKwB,GAAGC,EAAIV,GAAKW,OAGxB,IAAK,IAAIX,EAAI,EAAGA,EAAIW,EAAKlC,OAAQuB,IAC/Be,QAAQC,IAAI,eAAeP,EAAIT,MAAMU,KACrChC,KAAKO,KAAKwB,EAAIT,GAAGU,GAAKC,EAG1BjC,KAAKS,MAAM8B,QAAQ,CAAEN,OAAMF,IAAGC,IAAGF,eACjCO,QAAQC,IAAI,gBACZD,QAAQC,IAAItC,KAAKO,MACjB8B,QAAQC,IAAItC,KAAKS,MAEnB,MACE+B,MAAM,kCAEV,CAEA,aAAAC,CAAcV,EAAGC,GACf,MAAMU,EAAS1C,KAAKO,KAAKwB,GAAGC,GACxBU,aAAkB7C,GACpB6C,EAAOvC,MACPH,KAAKO,KAAKwB,GAAGC,GAAK,QAElBhC,KAAKU,cAAciC,KAAK,CAAEZ,IAAGC,MAC7BhC,KAAKO,KAAKwB,GAAGC,GAAK,QAGpBK,QAAQC,IAAItC,KAAKO,KAAKwB,GAAGC,GAC3B,CAEA,YAAAY,GACE,OAAO5C,KAAKS,MAAMoC,OAAOhB,GAAYA,EAAQI,KAAK7B,UACpD,GCtHK,WACL,MAAM0C,EAAoB7B,SAAS8B,cAAc,oBAEjDD,EAAkBE,iBAAiB,SAAS,KACJ,eAAlCF,EAAkBG,YACpBH,EAAkBG,YAAc,WAEhCH,EAAkBG,YAAc,aAGlCZ,QAAQC,IAAI,UAAU,GAE1B,CCRAY,GAEA,MAAMC,EAAWlC,SAASC,eAAe,aACnCkC,EAAkB,IAAI/C,EAa5B,SAASgD,EAAiBpB,GACxB,OAAO,IAAIqB,SAASC,IAClB,MAAMC,EAAcvC,SAASwC,iBAAiB,sBAE9C,SAASC,IACP,MAAMC,EAAc3D,KAAK4B,GAAGgC,MAAM,KAAKC,IAAIC,SACpC/B,EAAGC,GAAK2B,EAEf,IAAII,EASJ,GANEA,EAD8B,eADZ9C,SAAS8B,cAAc,oBAC3BE,YAOZc,EACF,IAAK,IAAIzC,EAAI,EAAGA,EAAIW,EAAKlC,OAAQuB,IAAK,CACpC,MAAMG,EAAOR,SAASC,eAAe,GAAGa,KAAKC,EAAIV,KAC7CG,GACFA,EAAKC,UAAUC,IAAI,YAEvB,MAEA,IAAK,IAAIL,EAAI,EAAGA,EAAIW,EAAKlC,OAAQuB,IAAK,CACpC,MAAMG,EAAOR,SAASC,eAAe,GAAGa,EAAIT,KAAKU,KAC7CP,GACFA,EAAKC,UAAUC,IAAI,YAEvB,CAEJ,CAEA,SAASqC,IACP/C,SAASwC,iBAAiB,cAAcQ,SAASxC,IAC/CA,EAAKC,UAAUwC,OAAO,YAAY,GAEtC,CAEA,SAASC,IACP,MAAMR,EAAc3D,KAAK4B,GAAGgC,MAAM,KAAKC,IAAIC,SACpC/B,EAAGC,GAAK2B,EAEf,IAAII,EAGFA,EAD8B,eADZ9C,SAAS8B,cAAc,oBAC3BE,YAMhBG,EAAgBjB,UAAUF,EAAMF,EAAGC,EAAG+B,GAGtCP,EAAYS,SAASxC,IACnBA,EAAK2C,oBAAoB,YAAaV,GACtCjC,EAAK2C,oBAAoB,WAAYJ,GACrCvC,EAAK2C,oBAAoB,QAASD,EAAa,IAGjDZ,GACF,CAEAC,EAAYS,SAASxC,IACnBA,EAAKuB,iBAAiB,YAAaU,GACnCjC,EAAKuB,iBAAiB,WAAYgB,GAClCvC,EAAKuB,iBAAiB,QAASmB,EAAa,GAC5C,GAEN,CAjFAhB,EAASH,iBAAiB,SAAS,KACjC,MAAMqB,EAAUpD,SAAS8B,cAAc,YACpB9B,SAAS8B,cAAc,gBAC/BuB,MAAMC,QAAU,OAC3BF,EAAQC,MAAMC,QAAU,OA+I1BC,iBASE,IAAIC,EAAc,CAPI,IAAI5E,EAAK,GACN,IAAIA,EAAK,GACZ,IAAIA,EAAK,GACN,IAAIA,EAAK,GACT,IAAIA,EAAK,GACT,IAAIA,EAAK,GACT,IAAIA,EAAK,IAU9B6E,GAAW,EAKf,IAHAtB,EAAgBtC,gBAAgB,oBAGzB2D,EAAY1E,OAAS,SACpBsD,EAAiBoB,EAAY,IACnCpC,QAAQC,IAAIc,EAAgB3C,MAAM,IAClC4B,QAAQC,IAAImC,EAAY,IACpBrB,EAAgB3C,MAAM,GAAGwB,OAASwC,EAAY,IAChDA,EAAYE,QAEdvB,EAAgBtC,gBAAgB,oBAQlC,IAJ0BG,SAAS8B,cAAc,oBAC/BuB,MAAMC,QAAU,QAG1BG,GAAU,CAMhB,SAyBO,IAAIpB,SAASC,IAElB,MAAMqB,EAAgB3D,SAASwC,iBAAiB,wBAEhD,SAASU,IAEP,MAAMR,EAAc3D,KAAK4B,GAAGgC,MAAM,KAAKC,IAAIC,SACpC/B,EAAGC,GAAK2B,EAGfkB,EAAkBpC,cAAcV,EAAGC,GAGnC4C,EAAcX,SAASxC,IACrBA,EAAK2C,oBAAoB,QAASD,EAAa,IAIjDZ,GACF,CAEAqB,EAAcX,SAASxC,IACrBA,EAAKuB,iBAAiB,QAASmB,EAAa,GAC5C,IAnDJU,EAAkB/D,gBAAgB,sBAG9B+D,EAAkBjC,eAAgB,CACpC8B,GAAW,EACXlC,MAAM,gBACN,KACF,CAUA,SAPMsC,EAAM,KAGZC,EAAa3B,GACbA,EAAgBtC,gBAAgB,oBAG5BsC,EAAgBR,eAAgB,CAClC8B,GAAW,EACXlC,MAAM,kBACN,KACF,CACF,CAkCA,SAASuC,EAAa3B,GAEpB,MAAMrB,EAAIiD,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBlD,EAAIgD,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1B9B,EAAgBX,cAAcV,EAAGC,EACnC,CAEA,SAAS8C,EAAMK,GAEb,OAAO,IAAI7B,SAASC,GAAY6B,WAAW7B,EAAS4B,IACtD,CACF,CAzPEE,EAAU,IAmFZ,MAAMR,EAAoB,IAAIxE,EACxBiF,EAAkB,IAAIzF,EAAK,GAC3B0F,EAAqB,IAAI1F,EAAK,GAC9B2F,EAAkB,IAAI3F,EAAK,GAC3B4F,EAAqB,IAAI5F,EAAK,GAC9B6F,EAAqB,IAAI7F,EAAK,GAC9B8F,EAAqB,IAAI9F,EAAK,GAC9B+F,EAAqB,IAAI/F,EAAK,GAYpC,SAASgG,EAAmB5D,GAC1B,MAAMF,EAAIiD,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBlD,EAAIgD,KAAKC,MAAsB,GAAhBD,KAAKE,UAE1B,IAAInB,EADkBiB,KAAKE,SAAW,GAGlC9C,EAAQH,EAAMF,EAAGC,EAAG+B,EAAcc,GACpCA,EAAkB1C,UAAUF,EAAMF,EAAGC,EAAG+B,GAExC8B,EAAmB5D,EAEvB,CAGO,SAASG,EAAQH,EAAMF,EAAGC,EAAG+B,EAAc+B,EAAQ1C,GAExD,GAAIW,EAAc,CAChB,GAAI/B,EAAIC,EAAKlC,OAAS,EAAI,GAAKgC,GAAK,EAClC,OAAO,EAET,IAAK,IAAIT,EAAIU,EAAGV,EAAIU,EAAIC,EAAKlC,OAAS,EAAGuB,IACvC,GAAyB,OAArBwE,EAAMvF,KAAKwB,GAAGT,GAChB,OAAO,CAGb,KAAO,CACL,GAAIS,EAAIE,EAAKlC,OAAS,EAAI,GAAKiC,GAAK,EAClC,OAAO,EAET,IAAK,IAAIV,EAAIS,EAAGT,EAAIS,EAAIE,EAAKlC,OAAS,EAAGuB,IACvC,GAAyB,OAArBwE,EAAMvF,KAAKe,GAAGU,GAChB,OAAO,CAGb,CAEA,OAAO,CACT,CA9CA6D,EAAmBP,GACnBO,EAAmBN,GACnBM,EAAmBL,GACnBK,EAAmBJ,GACnBI,EAAmBH,GACnBG,EAAmBF,GACnBE,EAAmBD,E","sources":["webpack://repository-template/webpack/bootstrap","webpack://repository-template/webpack/runtime/define property getters","webpack://repository-template/webpack/runtime/hasOwnProperty shorthand","webpack://repository-template/./src/ship.js","webpack://repository-template/./src/gameBoard.js","webpack://repository-template/./src/dom.js","webpack://repository-template/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = 0;\n    this.sunk = false;\n  }\n\n  hit() {\n    this.hits++;\n    if (this.hits === this.length) {\n      this.sunk = true;\n    }\n  }\n\n  isSunk() {\n    return this.sunk;\n  }\n}","import { Ship } from \"./ship\";\nimport { isValid } from \"./index\";\n\nexport class GameBoard {\n  constructor(gridSize = 10) {\n    this.gridSize = gridSize;\n    this.grid = this.createGrid();\n    this.ships = [];\n    this.missedAttacks = [];\n  }\n\n  createGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null)\n    );\n  }\n\n  renderGameBoard(containerId) {\n    const container = document.getElementById(containerId);\n    container.innerHTML = \"\";\n\n    const table = document.createElement(\"table\");\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = document.createElement(\"tr\");\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n\n        // Set id attribute with x, y coordinates\n        cell.id = `${i}-${j}`;\n\n        if (containerId === \"player-gameboard\") {\n          cell.classList.add(\"player-cell\");\n          for (const shipObj of this.ships) {\n            // Check if the ship occupies the specified grid location (i, j)\n            if (\n              shipObj.horizontal && // Ship is placed horizontally\n              i === shipObj.x && // Row matches ship's starting row\n              j >= shipObj.y && // Column is within the range of the ship's length\n              j < shipObj.y + shipObj.ship.length // Column is within the range of the ship's length\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            } else if (\n              !shipObj.horizontal && // Ship is placed vertically\n              i >= shipObj.x && // Row is within the range of the ship's length\n              i < shipObj.x + shipObj.ship.length && // Row is within the range of the ship's length\n              j === shipObj.y // Column matches ship's starting column\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            }\n          }\n\n          // Event Listeners to place ships\n          // cell.addEventListener(\"click\", () => {\n          //   this.placeShip(i, j);\n          // });\n        } else {\n          cell.classList.add(\"computer-cell\");\n          cell.classList.add(\"blank\"); // white smoke color\n        }\n\n        // add cell classes for hit & missed\n        if (this.grid[i][j] === null) {\n          cell.classList.add(\"blank\"); // white smoke color\n        } else if (this.grid[i][j] === \"HIT\") {\n          cell.classList.add(\"hit\"); // red color\n        } else if (this.grid[i][j] === \"MISS\") {\n          cell.classList.add(\"miss\"); // dark gray color\n          // turn off cursor/don't allow click\n        }\n\n        row.appendChild(cell);\n      }\n      table.appendChild(row);\n    }\n    container.appendChild(table);\n  }\n\n  placeShip(ship, x, y, horizontal) {\n    if (isValid(ship, x, y, horizontal)) {\n      if (horizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Vertical: ${x}, ${y + i}`);\n          this.grid[x][y + i] = ship;\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Horizontal: ${x + i}, ${y}`);\n          this.grid[x + i][y] = ship;\n        }\n      }\n      this.ships.unshift({ ship, x, y, horizontal });\n      console.log('Ship Placed!');\n      console.log(this.grid);\n      console.log(this.ships);\n\n    } else {\n      alert(\"Please choose a valid location!\");\n    }\n  }\n\n  receiveAttack(x, y) {\n    const target = this.grid[x][y];\n    if (target instanceof Ship) {\n      target.hit();\n      this.grid[x][y] = \"HIT\";\n    } else {\n      this.missedAttacks.push({ x, y });\n      this.grid[x][y] = \"MISS\";\n    }\n\n    console.log(this.grid[x][y]);\n  }\n\n  allShipsSunk() {\n    return this.ships.every((shipObj) => shipObj.ship.isSunk());\n  }\n}\n","export function toggleOrientation() {\n  const orientationButton = document.querySelector(\".orientation-btn\");\n\n  orientationButton.addEventListener(\"click\", () => {\n    if (orientationButton.textContent === \"Horizontal\") {\n      orientationButton.textContent = \"Vertical\";\n    } else {\n      orientationButton.textContent = \"Horizontal\";\n    }\n\n    console.log(\"clicked\");\n  });\n}\n","import { GameBoard } from \"./gameBoard\";\nimport { Ship } from \"./ship\";\nimport { toggleOrientation } from \"./dom\";\n\ntoggleOrientation();\n\nconst startBtn = document.getElementById(\"start-btn\");\nconst playerGameBoard = new GameBoard();\n\nstartBtn.addEventListener(\"click\", () => {\n  const content = document.querySelector(\".content\");\n  const gameWindow = document.querySelector(\".game-window\");\n  gameWindow.style.display = \"flex\";\n  content.style.display = \"none\";\n  // computerGameBoard.renderGameBoard(\"computer-gameboard\");\n  gameLoop();\n  // add function to let player place boats\n  // add function to randomly place computer boats\n});\n\nfunction placePlayerShips(ship) {\n  return new Promise((resolve) => {\n    const playerCells = document.querySelectorAll(\".player-cell.blank\");\n\n    function mouseoverHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      // Highlight cells based on ship's length and orientation\n      if (isHorizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x}-${y + i}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x + i}-${y}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      }\n    }\n\n    function mouseoutHandler() {\n      document.querySelectorAll(\".highlight\").forEach((cell) => {\n        cell.classList.remove(\"highlight\");\n      });\n    }\n\n    function clickHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      playerGameBoard.placeShip(ship, x, y, isHorizontal);\n\n      // Remove event listeners after placing ship\n      playerCells.forEach((cell) => {\n        cell.removeEventListener(\"mouseover\", mouseoverHandler);\n        cell.removeEventListener(\"mouseout\", mouseoutHandler);\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      resolve();\n    }\n\n    playerCells.forEach((cell) => {\n      cell.addEventListener(\"mouseover\", mouseoverHandler);\n      cell.addEventListener(\"mouseout\", mouseoutHandler);\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n\n// add readyBtn to begin the game after placing boats\n// readyBtn.addEventListener('click', () => {\n//   // render the board with boats placed.\n// });\n\n// Initialize Computer Board & Ships\nconst computerGameBoard = new GameBoard();\nconst computerCarrier = new Ship(5);\nconst computerBattleship = new Ship(4);\nconst computerCruiser = new Ship(3);\nconst computerSubmarine1 = new Ship(3);\nconst computerSubmarine2 = new Ship(3);\nconst computerDestroyer1 = new Ship(2);\nconst computerDestroyer2 = new Ship(2);\n\n// place computer ships\nplaceComputerShips(computerCarrier);\nplaceComputerShips(computerBattleship);\nplaceComputerShips(computerCruiser);\nplaceComputerShips(computerSubmarine1);\nplaceComputerShips(computerSubmarine2);\nplaceComputerShips(computerDestroyer1);\nplaceComputerShips(computerDestroyer2);\n\n// Randomly places computer ships\nfunction placeComputerShips(ship) {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  const randomBoolean = Math.random() < 0.5;\n  let isHorizontal = randomBoolean;\n\n  if (isValid(ship, x, y, isHorizontal, computerGameBoard)) {\n    computerGameBoard.placeShip(ship, x, y, isHorizontal);\n  } else {\n    placeComputerShips(ship);\n  }\n}\n\n// Check if ship fits on board and does not overlap\nexport function isValid(ship, x, y, isHorizontal, board = playerGameBoard) {\n  // Check if ship goes out of the board's grid\n  if (isHorizontal) {\n    if (y + ship.length - 1 > 9 || x >= 9) {\n      return false;\n    }\n    for (let i = y; i < y + ship.length - 1; i++) {\n      if (board.grid[x][i] !== null) {\n        return false;\n      }\n    }\n  } else {\n    if (x + ship.length - 1 > 9 || y >= 9) {\n      return false;\n    }\n    for (let i = x; i < x + ship.length - 1; i++) {\n      if (board.grid[i][y] !== null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nasync function gameLoop() {\n  // Initialize game state\n  const playerCarrier = new Ship(5);\n  const playerBattleship = new Ship(4);\n  const playerCruiser = new Ship(3);\n  const playerSubmarine1 = new Ship(3);\n  const playerSubmarine2 = new Ship(3);\n  const playerDestroyer1 = new Ship(2);\n  const playerDestroyer2 = new Ship(2);\n  let playerShips = [\n    playerCarrier,\n    playerBattleship,\n    playerCruiser,\n    playerSubmarine1,\n    playerSubmarine2,\n    playerDestroyer1,\n    playerDestroyer2,\n  ];\n  let gameOver = false;\n\n  playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n  // Player places ships\n  while (playerShips.length > 0) {\n    await placePlayerShips(playerShips[0]);\n    console.log(playerGameBoard.ships[0]);\n    console.log(playerShips[0]);\n    if (playerGameBoard.ships[0].ship === playerShips[0]) {\n      playerShips.shift();\n    }\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n  }\n\n  // Hide orientation button after boats are placed\n  const orientationButton = document.querySelector(\".orientation-btn\");\n  orientationButton.style.display = \"none\";\n\n  // Game loop\n  while (!gameOver) {\n    // Player's turn\n    await playerTurn(computerGameBoard);\n    computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n    // Check if player's move resulted in game over\n    if (computerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Player Wins!\");\n      break;\n    }\n\n    // Delay before computer's turn\n    await delay(3000); // Adjust delay time as needed\n\n    // Computer's turn\n    computerTurn(playerGameBoard);\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n    // Check if computer's move resulted in game over\n    if (playerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Computer Wins!\");\n      break;\n    }\n  }\n\n  // Game over, display result\n  // displayGameResult();\n  // Handle Player's Turn\n  function playerTurn() {\n    return new Promise((resolve) => {\n      // Add event listener to handle player's click on computer's cells\n      const computerCells = document.querySelectorAll(\".computer-cell.blank\");\n\n      function clickHandler() {\n        // Extract coordinates from cell id or data attribute\n        const coordinates = this.id.split(\"-\").map(Number);\n        const [x, y] = coordinates;\n\n        // Call the function to attack the computer's cell\n        computerGameBoard.receiveAttack(x, y);\n\n        // Remove event listener after the player's turn\n        computerCells.forEach((cell) => {\n          cell.removeEventListener(\"click\", clickHandler);\n        });\n\n        // Resolve the promise to indicate the end of the player's turn\n        resolve();\n      }\n\n      computerCells.forEach((cell) => {\n        cell.addEventListener(\"click\", clickHandler);\n      });\n    });\n  }\n\n  // Handle Computer's Turn\n  function computerTurn(playerGameBoard) {\n    // Implement computer logic for a random move\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    playerGameBoard.receiveAttack(x, y);\n  }\n\n  function delay(ms) {\n    // Function to introduce delay using Promise\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Ship","constructor","length","this","hits","sunk","hit","isSunk","GameBoard","gridSize","grid","createGrid","ships","missedAttacks","Array","from","fill","renderGameBoard","containerId","container","document","getElementById","innerHTML","table","createElement","i","row","j","cell","classList","add","id","shipObj","horizontal","x","y","ship","appendChild","placeShip","isValid","console","log","unshift","alert","receiveAttack","target","push","allShipsSunk","every","orientationButton","querySelector","addEventListener","textContent","toggleOrientation","startBtn","playerGameBoard","placePlayerShips","Promise","resolve","playerCells","querySelectorAll","mouseoverHandler","coordinates","split","map","Number","isHorizontal","mouseoutHandler","forEach","remove","clickHandler","removeEventListener","content","style","display","async","playerShips","gameOver","shift","computerCells","computerGameBoard","delay","computerTurn","Math","floor","random","ms","setTimeout","gameLoop","computerCarrier","computerBattleship","computerCruiser","computerSubmarine1","computerSubmarine2","computerDestroyer1","computerDestroyer2","placeComputerShips","board"],"sourceRoot":""}