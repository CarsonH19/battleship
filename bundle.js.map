{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://repository-template/webpack/bootstrap","webpack://repository-template/webpack/runtime/define property getters","webpack://repository-template/webpack/runtime/hasOwnProperty shorthand","webpack://repository-template/./src/ship.js","webpack://repository-template/./src/isValid.js","webpack://repository-template/./src/gameBoard.js","webpack://repository-template/./src/computer.js","webpack://repository-template/./src/player.js","webpack://repository-template/./src/dom.js","webpack://repository-template/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = 0;\n    this.sunk = false;\n  }\n\n  hit() {\n    this.hits++;\n    if (this.hits === this.length) {\n      this.sunk = true;\n    }\n  }\n\n  isSunk() {\n    return this.sunk;\n  }\n}","import { playerGameBoard } from \"./index\";\n\n// Check if ship fits on board and does not overlap\nexport function isValid(ship, x, y, isHorizontal, board = playerGameBoard) {\n  // Check if ship goes out of the board's grid\n  if (isHorizontal) {\n    if (y + ship.length - 1 > 10 || x >= 10) {\n      return false;\n    }\n    for (let i = y; i < y + ship.length - 1; i++) {\n      if (board.grid[x][i] !== null) {\n        return false;\n      }\n    }\n  } else {\n    if (x + ship.length - 1 > 10 || y >= 10) {\n      return false;\n    }\n    for (let i = x; i < x + ship.length - 1; i++) {\n      if (board.grid[i][y] !== null) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","import { Ship } from \"./ship\";\nimport { isValid } from \"./isValid\";\n\nexport class GameBoard {\n  constructor(gridSize = 10) {\n    this.gridSize = gridSize;\n    this.grid = this.createGrid();\n    this.ships = [];\n    this.missedAttacks = [];\n  }\n\n  createGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null)\n    );\n  }\n\n  renderGameBoard(containerId) {\n    const container = document.getElementById(containerId);\n    container.innerHTML = \"\";\n\n    const table = document.createElement(\"table\");\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = document.createElement(\"tr\");\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n\n        // Set id attribute with x, y coordinates\n        cell.id = `${i}-${j}`;\n\n        if (containerId === \"player-gameboard\") {\n          cell.classList.add(\"player-cell\");\n          for (const shipObj of this.ships) {\n            // Check if the ship occupies the specified grid location (i, j)\n            if (\n              shipObj.horizontal && // Ship is placed horizontally\n              i === shipObj.x && // Row matches ship's starting row\n              j >= shipObj.y && // Column is within the range of the ship's length\n              j < shipObj.y + shipObj.ship.length // Column is within the range of the ship's length\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            } else if (\n              !shipObj.horizontal && // Ship is placed vertically\n              i >= shipObj.x && // Row is within the range of the ship's length\n              i < shipObj.x + shipObj.ship.length && // Row is within the range of the ship's length\n              j === shipObj.y // Column matches ship's starting column\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            }\n          }\n\n          // Event Listeners to place ships\n          // cell.addEventListener(\"click\", () => {\n          //   this.placeShip(i, j);\n          // });\n        } else {\n          cell.classList.add(\"computer-cell\");\n          cell.classList.add(\"blank\"); // white smoke color\n        }\n\n        // add cell classes for hit & missed\n        if (this.grid[i][j] === null) {\n          cell.classList.add(\"blank\"); // white smoke color\n        } else if (this.grid[i][j] === \"HIT\") {\n          cell.classList.add(\"hit\"); // red color\n        } else if (this.grid[i][j] === \"MISS\") {\n          cell.classList.add(\"miss\"); // dark gray color\n          // turn off cursor/don't allow click\n        }\n\n        row.appendChild(cell);\n      }\n      table.appendChild(row);\n    }\n    container.appendChild(table);\n  }\n\n  placeShip(ship, x, y, horizontal) {\n    if (isValid(ship, x, y, horizontal)) {\n      if (horizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Vertical: ${x}, ${y + i}`);\n          this.grid[x][y + i] = ship;\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          console.log(`Horizontal: ${x + i}, ${y}`);\n          this.grid[x + i][y] = ship;\n        }\n      }\n      this.ships.unshift({ ship, x, y, horizontal });\n      console.log('Ship Placed!');\n      console.log(this.grid);\n      console.log(this.ships);\n\n    } else {\n      alert(\"Please choose a valid location!\");\n    }\n  }\n\n  receiveAttack(x, y) {\n    const target = this.grid[x][y];\n    if (target instanceof Ship) {\n      target.hit();\n      this.grid[x][y] = \"HIT\";\n    } else {\n      this.missedAttacks.push({ x, y });\n      this.grid[x][y] = \"MISS\";\n    }\n\n    console.log(this.grid[x][y]);\n  }\n\n  allShipsSunk() {\n    return this.ships.every((shipObj) => shipObj.ship.isSunk());\n  }\n}\n","import { computerGameBoard } from \"./index\";\nimport { isValid } from \"./isValid\"; \n\n// Handle Computer's Turn\nexport function computerTurn(board) {\n  // Implement computer logic for a random move\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  board.receiveAttack(x, y);\n}\n\n// Randomly places computer ships\nexport function placeComputerShips(ship) {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  const randomBoolean = Math.random() < 0.5;\n  let isHorizontal = randomBoolean;\n\n  if (isValid(ship, x, y, isHorizontal, computerGameBoard)) {\n    computerGameBoard.placeShip(ship, x, y, isHorizontal);\n  } else {\n    placeComputerShips(ship);\n  }\n}","import { computerGameBoard, playerGameBoard } from \"./index\";\n// import { isValid } from \"./isValid\"; \n\n\nexport function playerTurn(board) {\n  return new Promise((resolve) => {\n    // Add event listener to handle player's click on computer's cells\n    const computerCells = document.querySelectorAll(\".computer-cell.blank\");\n\n    function clickHandler() {\n      // Extract coordinates from cell id or data attribute\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      // Call the function to attack the computer's cell\n      board.receiveAttack(x, y);\n\n      // Remove event listener after the player's turn\n      computerCells.forEach((cell) => {\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      // Resolve the promise to indicate the end of the player's turn\n      resolve();\n    }\n\n    computerCells.forEach((cell) => {\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n\nexport function placePlayerShips(ship) {\n  return new Promise((resolve) => {\n    const playerCells = document.querySelectorAll(\".player-cell.blank\");\n\n    function mouseoverHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      // Highlight cells based on ship's length and orientation\n      if (isHorizontal) {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x}-${y + i}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      } else {\n        for (let i = 0; i < ship.length; i++) {\n          const cell = document.getElementById(`${x + i}-${y}`);\n          if (cell) {\n            cell.classList.add(\"highlight\");\n          }\n        }\n      }\n    }\n\n    function mouseoutHandler() {\n      document.querySelectorAll(\".highlight\").forEach((cell) => {\n        cell.classList.remove(\"highlight\");\n      });\n    }\n\n    function clickHandler() {\n      const coordinates = this.id.split(\"-\").map(Number);\n      const [x, y] = coordinates;\n\n      let isHorizontal;\n      const orientation = document.querySelector(\".orientation-btn\");\n      if (orientation.textContent === \"Horizontal\") {\n        isHorizontal = true;\n      } else {\n        isHorizontal = false;\n      }\n\n      playerGameBoard.placeShip(ship, x, y, isHorizontal);\n\n      // Remove event listeners after placing ship\n      playerCells.forEach((cell) => {\n        cell.removeEventListener(\"mouseover\", mouseoverHandler);\n        cell.removeEventListener(\"mouseout\", mouseoutHandler);\n        cell.removeEventListener(\"click\", clickHandler);\n      });\n\n      resolve();\n    }\n\n    playerCells.forEach((cell) => {\n      cell.addEventListener(\"mouseover\", mouseoverHandler);\n      cell.addEventListener(\"mouseout\", mouseoutHandler);\n      cell.addEventListener(\"click\", clickHandler);\n    });\n  });\n}\n","import { gameLoop } from \"./index\";\n\nexport function startGame() {\n  const startBtn = document.getElementById(\"start-btn\");\n\n  startBtn.addEventListener(\"click\", () => {\n    const content = document.querySelector(\".content\");\n    const gameWindow = document.querySelector(\".game-window\");\n    gameWindow.style.display = \"flex\";\n    content.style.display = \"none\";\n    gameLoop();\n  });\n}\n\nexport function toggleOrientation() {\n  const orientationButton = document.querySelector(\".orientation-btn\");\n\n  orientationButton.addEventListener(\"click\", () => {\n    if (orientationButton.textContent === \"Horizontal\") {\n      orientationButton.textContent = \"Vertical\";\n    } else {\n      orientationButton.textContent = \"Horizontal\";\n    }\n  });\n}\n","import { GameBoard } from \"./gameBoard\";\nimport { Ship } from \"./ship\";\nimport { startGame, toggleOrientation } from \"./dom\";\nimport { computerTurn, placeComputerShips } from \"./computer\";\nimport { playerTurn, placePlayerShips } from \"./player\";\n\n// Initialize event listeners\nstartGame();\ntoggleOrientation();\n\n// Initialize player board & ships\nexport const playerGameBoard = new GameBoard();\nconst playerCarrier = new Ship(5);\nconst playerBattleship = new Ship(4);\nconst playerCruiser = new Ship(3);\nconst playerSubmarine1 = new Ship(3);\nconst playerSubmarine2 = new Ship(3);\nconst playerDestroyer1 = new Ship(2);\nconst playerDestroyer2 = new Ship(2);\nlet playerShips = [\n  playerCarrier,\n  playerBattleship,\n  playerCruiser,\n  playerSubmarine1,\n  playerSubmarine2,\n  playerDestroyer1,\n  playerDestroyer2,\n];\n\n// Initialize computer board & ships\nexport const computerGameBoard = new GameBoard();\nconst computerCarrier = new Ship(5);\nconst computerBattleship = new Ship(4);\nconst computerCruiser = new Ship(3);\nconst computerSubmarine1 = new Ship(3);\nconst computerSubmarine2 = new Ship(3);\nconst computerDestroyer1 = new Ship(2);\nconst computerDestroyer2 = new Ship(2);\n\nexport async function gameLoop() {\n  let gameOver = false;\n  playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n  // place computer ships\n  placeComputerShips(computerCarrier);\n  placeComputerShips(computerBattleship);\n  placeComputerShips(computerCruiser);\n  placeComputerShips(computerSubmarine1);\n  placeComputerShips(computerSubmarine2);\n  placeComputerShips(computerDestroyer1);\n  placeComputerShips(computerDestroyer2);\n\n  // player places ships\n  while (playerShips.length > 0) {\n    await placePlayerShips(playerShips[0]);\n    if (playerGameBoard.ships[0].ship === playerShips[0]) {\n      playerShips.shift();\n    }\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n  }\n\n  // hide orientation button after boats are placed\n  const orientationButton = document.querySelector(\".orientation-btn\");\n  orientationButton.style.display = \"none\";\n\n  // render computer's board after player places ships\n  computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n  // Start Game loop\n  while (!gameOver) {\n    // player's turn\n    await playerTurn(computerGameBoard);\n    computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n    // check if player wins\n    if (computerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Player Wins!\");\n      break;\n    }\n\n    // delay before computer's turn\n    await delay(2000); // Adjust delay time as needed\n\n    // computer's turn\n    computerTurn(playerGameBoard);\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n\n    // check if computer wins\n    if (playerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Computer Wins!\");\n      break;\n    }\n  }\n\n  // Game over, display result\n  // displayGameResult();\n\n  \n\n  function delay(ms) {\n    // Function to introduce delay using Promise\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n\n\n  \n}\n\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Ship","constructor","length","this","hits","sunk","hit","isSunk","isValid","ship","x","y","isHorizontal","board","playerGameBoard","i","grid","GameBoard","gridSize","createGrid","ships","missedAttacks","Array","from","fill","renderGameBoard","containerId","container","document","getElementById","innerHTML","table","createElement","row","j","cell","classList","add","id","shipObj","horizontal","appendChild","placeShip","console","log","unshift","alert","receiveAttack","target","push","allShipsSunk","every","computerTurn","Math","floor","random","placeComputerShips","computerGameBoard","playerTurn","Promise","resolve","computerCells","querySelectorAll","clickHandler","coordinates","split","map","Number","forEach","removeEventListener","addEventListener","placePlayerShips","playerCells","mouseoverHandler","querySelector","textContent","mouseoutHandler","remove","content","style","display","gameLoop","orientationButton","toggleOrientation","playerShips","computerCarrier","computerBattleship","computerCruiser","computerSubmarine1","computerSubmarine2","computerDestroyer1","computerDestroyer2","async","gameOver","shift","delay","ms","setTimeout"],"sourceRoot":""}