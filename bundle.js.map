{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://repository-template/./src/ship.js","webpack://repository-template/./src/gameBoard.js","webpack://repository-template/./src/index.js"],"sourcesContent":["export class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = 0;\n    this.sunk = false;\n  }\n\n  hit() {\n    this.hits++;\n    if (this.hits === this.length) {\n      this.sunk = true;\n    }\n  }\n\n  isSunk() {\n    return this.sunk;\n  }\n}","import { Ship } from \"./ship\";\n\nexport class GameBoard {\n  constructor(gridSize = 10) {\n    this.gridSize = gridSize;\n    this.grid = this.createGrid();\n    this.ships = [];\n    this.missedAttacks = [];\n  }\n\n  createGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null)\n    );\n  }\n\n  renderGameBoard(containerId) {\n    const container = document.getElementById(containerId);\n    container.innerHTML = \"\";\n\n    const table = document.createElement(\"table\");\n    for (let i = 0; i < this.gridSize; i++) {\n      const row = document.createElement(\"tr\");\n      for (let j = 0; j < this.gridSize; j++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n\n        // Set id attribute with x, y coordinates\n        cell.id = `${i}-${j}`;\n\n        if (containerId === \"player-gameboard\") {\n          cell.classList.add(\"player-cell\");\n          for (const shipObj of this.ships) {\n            // Check if the ship occupies the specified grid location (i, j)\n            if (\n              shipObj.horizontal && // Ship is placed horizontally\n              i === shipObj.x && // Row matches ship's starting row\n              j >= shipObj.y && // Column is within the range of the ship's length\n              j < shipObj.y + shipObj.ship.length // Column is within the range of the ship's length\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            } else if (\n              !shipObj.horizontal && // Ship is placed vertically\n              i >= shipObj.x && // Row is within the range of the ship's length\n              i < shipObj.x + shipObj.ship.length && // Row is within the range of the ship's length\n              j === shipObj.y // Column matches ship's starting column\n            ) {\n              // Add the \"ship\" class to the cell\n              cell.classList.add(\"ship\"); // blue color\n            }\n          }\n\n          // Event Listeners to place ships\n          // cell.addEventListener(\"click\", () => {\n          //   this.placeShip(i, j);\n          // });\n        } else {\n          cell.classList.add(\"computer-cell\");\n          cell.classList.add(\"blank\"); // white smoke color\n        }\n\n        // add cell classes for hit & missed\n        if (this.grid[i][j] === null) {\n          cell.classList.add(\"blank\"); // white smoke color\n        } else if (this.grid[i][j] === \"HIT\") {\n          cell.classList.add(\"hit\"); // red color\n        } else if (this.grid[i][j] === \"MISS\") {\n          cell.classList.add(\"miss\"); // dark gray color\n          // turn off cursor/don't allow click\n        }\n\n        row.appendChild(cell);\n      }\n      table.appendChild(row);\n    }\n    container.appendChild(table);\n  }\n\n  placeShip(ship, x, y, horizontal) {\n    if (horizontal) {\n      for (let i = 0; i < ship.length; i++) {\n        this.grid[x][y + i] = ship;\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        console.log(ship);\n        console.log(this.grid);\n        console.log(`${x + i}, ${y}`);\n        this.grid[x + i][y] = ship;\n      }\n    }\n    this.ships.push({ ship, x, y, horizontal });\n  }\n\n  receiveAttack(x, y) {\n    const target = this.grid[x][y];\n    if (target instanceof Ship) {\n      target.hit();\n      this.grid[x][y] = \"HIT\";\n    } else {\n      this.missedAttacks.push({ x, y });\n      this.grid[x][y] = \"MISS\";\n    }\n\n    console.log(this.grid[x][y]);\n  }\n\n  allShipsSunk() {\n    return this.ships.every((shipObj) => shipObj.ship.isSunk());\n  }\n}\n","import { GameBoard } from \"./gameBoard\";\nimport { Ship } from \"./ship\";\n\nconst startBtn = document.getElementById(\"start-btn\");\n\nstartBtn.addEventListener(\"click\", () => {\n  const content = document.querySelector(\".content\");\n  const gameWindow = document.querySelector(\".game-window\");\n  gameWindow.style.display = \"flex\";\n  content.style.display = \"none\";\n  playerGameBoard.renderGameBoard(\"player-gameboard\");\n  computerGameBoard.renderGameBoard(\"computer-gameboard\");\n  gameLoop();\n\n  // add function to let player place boats\n  // add function to randomly place computer boats\n});\n\n// add readyBtn to begin the game after placing boats\n// readyBtn.addEventListener('click', () => {\n//   // render the board with boats placed.\n// });\n\nconst playerGameBoard = new GameBoard();\nconst playerCarrier = new Ship(5);\nconst playerBattleship = new Ship(4);\nconst playerCruiser = new Ship(3);\nconst playerSubmarine1 = new Ship(3);\nconst playerSubmarine2 = new Ship(3);\nconst playerDestroyer1 = new Ship(2);\nconst playerDestroyer2 = new Ship(2);\n// place player ships\nplayerGameBoard.placeShip(playerCarrier, 1, 5, true);\nconsole.log(playerGameBoard.grid);\nplayerGameBoard.placeShip(playerBattleship, 2, 5, true);\nplayerGameBoard.placeShip(playerCruiser, 3, 5, true);\nplayerGameBoard.placeShip(playerSubmarine1, 4, 5, true);\nplayerGameBoard.placeShip(playerSubmarine2, 5, 5, true);\nplayerGameBoard.placeShip(playerDestroyer1, 6, 5, true);\nplayerGameBoard.placeShip(playerDestroyer2, 7, 5, true);\n\nconst computerGameBoard = new GameBoard();\nconst computerCarrier = new Ship(5);\nconst computerBattleship = new Ship(4);\nconst computerCruiser = new Ship(3);\nconst computerSubmarine1 = new Ship(3);\nconst computerSubmarine2 = new Ship(3);\nconst computerDestroyer1 = new Ship(2);\nconst computerDestroyer2 = new Ship(2);\n\nconsole.log(computerGameBoard.grid);\n\n// place computer ships\nplaceComputerShips(computerCarrier);\nplaceComputerShips(computerBattleship);\nplaceComputerShips(computerCruiser);\nplaceComputerShips(computerSubmarine1);\nplaceComputerShips(computerSubmarine2);\nplaceComputerShips(computerDestroyer1);\nplaceComputerShips(computerDestroyer2);\n\nconsole.log(computerGameBoard.grid);\n\n// Randomly places computer ships\nfunction placeComputerShips(ship) {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  const randomBoolean = Math.random() < 0.5;\n  let isHorizontal = randomBoolean;\n\n  if (isValid(x, y, isHorizontal)) {\n    computerGameBoard.placeShip(ship, x, y, isHorizontal);\n    console.log(`${x}, ${y}`);\n  } else {\n    placeComputerShips(ship);\n  }\n\n  // Check if ship fits on board and does not overlap\n  function isValid(x, y, isHorizontal) {\n    // Check if ship goes out of the board's grid\n    if (isHorizontal) {\n      if (y + ship.length > 10 || x >= 10) {\n        return false;\n      }\n      for (let i = y; i < y + ship.length - 1; i++) {\n        if (computerGameBoard.grid[x][i] !== null) {\n          return false;\n        }\n      }\n    } else {\n      if (x + ship.length > 10 || y >= 10) {\n        return false;\n      }\n      for (let i = x; i < x + ship.length - 1; i++) {\n        if (computerGameBoard.grid[i][y] !== null) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nasync function gameLoop() {\n  // Initialize game state\n  let gameOver = false;\n\n  // Game loop\n  while (!gameOver) {\n    // Player's turn\n    console.log(\"Player, choose a cell\");\n    await playerTurn(computerGameBoard);\n    computerGameBoard.renderGameBoard(\"computer-gameboard\");\n\n    // Check if player's move resulted in game over\n    if (computerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Player Wins!\");\n      break;\n    }\n\n    // Delay before computer's turn\n    await delay(3000); // Adjust delay time as needed\n\n    // Computer's turn\n    computerTurn(playerGameBoard);\n    playerGameBoard.renderGameBoard(\"player-gameboard\");\n    console.log(\"Computer attacks!\");\n\n    // Check if computer's move resulted in game over\n    if (playerGameBoard.allShipsSunk()) {\n      gameOver = true;\n      alert(\"Computer Wins!\");\n      break;\n    }\n\n    // Repeat the loop\n  }\n\n  // Game over, display result\n  // displayGameResult();\n  // Handle Player's Turn\n  function playerTurn() {\n    return new Promise((resolve) => {\n      // Add event listener to handle player's click on computer's cells\n      const computerCells = document.querySelectorAll(\".computer-cell.blank\");\n\n      function clickHandler() {\n        // Extract coordinates from cell id or data attribute\n        const coordinates = this.id.split(\"-\").map(Number);\n        const [x, y] = coordinates;\n\n        // Call the function to attack the computer's cell\n        computerGameBoard.receiveAttack(x, y);\n\n        // Remove event listener after the player's turn\n        computerCells.forEach((cell) => {\n          cell.removeEventListener(\"click\", clickHandler);\n        });\n\n        // Resolve the promise to indicate the end of the player's turn\n        resolve();\n      }\n\n      computerCells.forEach((cell) => {\n        cell.addEventListener(\"click\", clickHandler);\n      });\n    });\n  }\n\n  // Handle Computer's Turn\n  function computerTurn(playerGameBoard) {\n    // Implement computer logic for a random move\n    const x = Math.floor(Math.random() * 10);\n    const y = Math.floor(Math.random() * 10);\n    playerGameBoard.receiveAttack(x, y);\n  }\n\n  function delay(ms) {\n    // Function to introduce delay using Promise\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n"],"names":["Ship","constructor","length","this","hits","sunk","hit","isSunk","GameBoard","gridSize","grid","createGrid","ships","missedAttacks","Array","from","fill","renderGameBoard","containerId","container","document","getElementById","innerHTML","table","createElement","i","row","j","cell","classList","add","id","shipObj","horizontal","x","y","ship","appendChild","placeShip","console","log","push","receiveAttack","target","allShipsSunk","every","addEventListener","content","querySelector","style","display","playerGameBoard","computerGameBoard","async","gameOver","Promise","resolve","computerCells","querySelectorAll","clickHandler","coordinates","split","map","Number","forEach","removeEventListener","alert","delay","computerTurn","Math","floor","random","ms","setTimeout","gameLoop","playerCarrier","playerBattleship","playerCruiser","playerSubmarine1","playerSubmarine2","playerDestroyer1","playerDestroyer2","computerCarrier","computerBattleship","computerCruiser","computerSubmarine1","computerSubmarine2","computerDestroyer1","computerDestroyer2","placeComputerShips","isHorizontal","isValid"],"sourceRoot":""}